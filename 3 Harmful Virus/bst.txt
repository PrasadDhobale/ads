#include<iostream>

using namespace std;
#define count 5
class node {
    public: node * left;
    node * right;
    int value;
};
node * root = NULL;
class stack {
    int top;
    node * stack_node[20];
    public:
        stack() {
            top = -1;
        }
    void push(node * );
    node * pop();
    node * peek(stack stk);
    int empty() {
        if (top == -1)
            return (1);
        return (0);
    }
};
void stack::push(node * node) {
    stack_node[++top] = node;
}
node * stack::pop() {
    return (stack_node[top--]);
}
int insert(node * root, node * temp) {
    if (root -> value == temp -> value) {
        return 3;
    } else {
        if (temp -> value < root -> value) {
            if (root -> left != NULL) {
                insert(root -> left, temp);
            } else {
                root -> left = temp;
                root -> left -> left = NULL;
                root -> left -> right = NULL;
                return 1;
            }
        } else {
            if (root -> right != NULL) {
                insert(root -> right, temp);
            } else {
                root -> right = temp;
                root -> right -> left = NULL;
                root -> right -> right = NULL;
                return 2;
            }
        }
    }
}
void display_traversal(node * root, int s) {
    if (root == NULL) {
        return;
    }
    s += count;
    display_traversal(root -> right, s);
    cout << endl;
    for (int i = count; i < s; i++) {
        cout << " ";
    }
    cout << root -> value << "\n";
    display_traversal(root -> left, s);
}
void inorder_rec(node * r_root) {
    if (r_root == NULL) {
        return;
    } else {
        inorder_rec(r_root -> left);
        cout << r_root -> value << " ";
        inorder_rec(r_root -> right);
    }
}
void postorder_rec(node * r_root) {
    if (r_root == NULL) {
        return;
    } else {
        postorder_rec(r_root -> left);
        postorder_rec(r_root -> right);
        cout << r_root -> value << " ";
    }
}
void preorder_rec(node * r_root) {
    if (r_root == NULL) {
        return;
    } else {
        cout << r_root -> value << " ";
        preorder_rec(r_root -> left);
        preorder_rec(r_root -> right);
    }
}
void inorder_non_rec(node * c_root) {
    stack stk;
    node * temp;
    if (c_root != NULL) {
        temp = c_root;
        do {
            while (temp != NULL) {
                stk.push(temp);
                temp = temp -> left;
            }
            if (!stk.empty()) {
                temp = stk.pop();
                cout << temp -> value << " ";
                temp = temp -> right;
            } else
                break;
        } while (1);
    } else {
        cout << "Empty Tree" << endl;
    }
}
void postorder_non_rec(node * r_root) {
    if (r_root == NULL) {
        return;
    }
    stack s1, s2;
    s1.push(root);
    node * temp;
    while (!s1.empty()) {
        temp = s1.pop();
        s2.push(temp);
        if (temp -> left) {
            s1.push(temp -> left);
        }
        if (temp -> right) {
            s1.push(temp -> right);
        }
    }
    while (!s2.empty()) {
        temp = s2.pop();
        cout << temp -> value << " ";
    }
}
void preorder_non_rec(node * r_root) {
    stack s;
    node * temp = root;
    s.push(temp);
    while (!s.empty()) {
        temp = s.pop();
        if (temp != NULL) {
            cout << temp -> value << " " << endl;
            s.push(temp -> right);
            s.push(temp -> left);
        }
    }
}
node * delete_1(node * root, int val) {
    if (root == NULL) {
        cout << "Tree is Empty or the element is not found";
        return root;
    }
    if (val < root -> value) {
        root -> left = delete_1(root -> left, val);
        return root;
    } else if (val > root -> value) {
        root -> right = delete_1(root -> right, val);
        return root;
    }
    if (root -> left == NULL) {
        node * temp = root -> right;
        delete root;
        return temp;
    } else if (root -> right == NULL) {
        node * temp = root -> left;
        delete root;
        return temp;
    } else {
        node * parent = root;
        node * node_successor = root -> right;
        while (node_successor -> left != NULL) {
            parent = node_successor;
            node_successor = node_successor -> left;
        }
        if (parent != root) {
            parent -> left = node_successor -> right;
        } else {
            parent -> right = node_successor -> right;
        }
        root -> value = node_successor -> value;
        delete node_successor;
        return root;
    }
}
int search(node * root, int val) {
    if (root == NULL)
        cout << "Element not found in the tree" << endl;
    else {
        if (root -> value == val) {
            //cout << root->value << endl;
            return 10;
        } else if (val < root -> value)
            search(root -> left, val);
        else if (val > root -> value)
            search(root -> right, val);
    }
}
int main() {
    int ch, x;
    do {
        cout << "\n1.Insert\n2.Display\n3.Inorder_Rec\n4.Postorder_Rec\
n5.Preorder_Rec\n6.Inorder_Non_Rec\n7.Postorder_Non_Rec\n8.Preo
        rder_Non_Rec\ n9.Delete\ n10.Search\ n11.Exit\ nEnter Choice: \n ";
        cin >> ch;
        switch (ch) {
        case 1: {
            node * temp;
            temp = new node;
            cout << "Enter the value" << endl;
            cin >> temp -> value;
            if (root == NULL) {
                root = new node;
                root -> value = temp -> value;
                root -> left = NULL;
                root -> right = NULL;
                cout << "ADDED" << endl;
            } else {
                x = insert(root, temp);
                if (x == 1) {
                    cout << "Node added to left" << endl;
                } else if (x == 2) {
                    cout << "Node added to right" << endl;
                } else if (x == 3) {
                    cout << "the node you are trying 
                    already exist "<<endl;
                }
            }
            break;
        }
        case 2: {
            cout << "** Binary Search Tree**" << endl;
            display_traversal(root, 0);
            break;
        }
        case 3: {
            cout << "Inorder Traveral sequence" << endl;
            inorder_rec(root);
            cout << endl;
            break;
        }
        case 4: {
            cout << "Postorder Traversal sequence" << endl;
            postorder_rec(root);
            cout << endl;
            break;
        }
        case 5: {
            cout << "Preorder Traversal sequence" << endl;
            preorder_rec(root);
            cout << endl;
            break;
        }
        case 6: {
            cout << "Inorder Non Rec Traversal 
            sequence "<<endl;
            inorder_non_rec(root);
            cout << endl;
            break;
        }
        case 7: {
            cout << "Postorder Non Rec Traversal 
            sequence "<<endl;
            postorder_non_rec(root);
            cout << endl;
            break;
        }
        case 8: {
            cout << "Preorder Non Rec Traversal 
            sequence "<<endl;
            preorder_non_rec(root);
            cout << endl;
            break;
        }
        case 9: {
            int a;
            cout << "Enter the value to be deleted: ";
            cin >> a;
            delete_1(root, a);
            break;
        }
        case 10: {
            cout << "Enter the value to be searched: ";
            int b;
            cin >> b;
            search(root, b);
            if (search(root, b) == 10) {
                cout << "Number found" << endl;
            }
            break;
        }
        default: {
            break;
        }
        }
    } while (ch != 11);
}